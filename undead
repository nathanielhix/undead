#!/usr/bin/env python3

import socket
from argparse import ArgumentParser
from collections.abc import Callable
from concurrent.futures import ThreadPoolExecutor, as_completed
from csv import DictWriter
from datetime import datetime
from ipaddress import ip_address
from json import dump
from multiprocessing import cpu_count
from os import system as osystem
from platform import system as psystem
from shutil import which
from subprocess import run
from sys import exit, stderr
from time import sleep
from typing import Any, Union


class NetObj:
    def __init__(self, hostname):
        self.hostname = hostname
        self.ip_addr = None
        self.status = None
        self.icmp_status = None
        self.tcp_port = None
        self.tcp_status = None
        self.net_ib = None
        self.net_oob = None
        self.outs = None
        self.errs = None


# Global variables.
sys_os = psystem()
def_cores = cpu_count()


def conf_args():
    parser = ArgumentParser()

    # Required, and mutually exclusive, arguments.
    req_args = parser.add_mutually_exclusive_group(required=True)

    # Optional arguments.
    opt_args = parser.add_argument_group(title="Optional Arguments")

    # Test arguments.
    tst_args = parser.add_argument_group("Test Arguments")

    # Format arguments.
    fmt_args = parser.add_argument_group(title="Format Arguments")

    req_args.add_argument(
        '-H',
        '--host-file',
        type=str,
        help='A newline separated file of DNS-resolvable hostnames.',
    )
    req_args.add_argument(
        '-n',
        '--node',
        nargs='+',
        help='A space separate list of DNS-resolvable hostnames.',
    )

    tst_args.add_argument(
        '-i',
        '--icmp',
        action='store_true',
        help='ICMP Ping targets. Calls system ping utility.',
    )
    tst_args.add_argument(
        '-t',
        '--tcp',
        type=int,
        nargs=1,
        help='TCP ping targets. Accepts a numeric port.',
    )

    opt_args.add_argument(
        '-m',
        '--monitor',
        type=int,
        const=10,
        nargs='?',
        help='Monitor mode with a polling interval in seconds. Defaults to 10.',
    )

    fmt_args.add_argument(
        '-o',
        '--output-format',
        default='stdout',
        choices=['csv', 'json', 'stdout'],
        help='Write results to a file in CSV or JSON.'
    )
    fmt_args.add_argument(
        '-f',
        '--filter',
        nargs='+',
        choices=['d', 'u', 'k'],
        help='Filter stdout report for dead (d), undead (u), or unknown (k).'
    )

    return parser.parse_args()


def print_fmt(msg: str, level: str) -> str:
    # Print an ANSI color wrapped string.
    colors = {
        'back_bold_cyan': {'fmt': '\033[1;46;37m', 'fac': 'stdout'},
        'fore_std_green': {'fmt': '\033[0;40;32m', 'fac': 'stdout'},
        'fore_std_red': {'fmt': '\033[0;40;31m', 'fac': 'stdout'},
        'fore_std_yellow': {'fmt': '\033[0;40;93m', 'fac': 'stdout'},
        'debug': {'fmt': '\033[0;36m', 'fac': 'stderr'},
        'info': {'fmt': '\033[0;32m', 'fac': 'stderr'},
        'warn': {'fmt': '\033[0;33m', 'fac': 'stderr'},
        'error': {'fmt': '\033[0;31m', 'fac': 'stderr'},
        'fatal': {'fmt': '\033[1;31m', 'fac': 'stderr'},
        'reset': {'fmt': '\033[0m', 'fac': 'stderr'},
    }

    if level in colors.keys() and colors[level]['fac'] == 'stderr':
        print(f'{colors[level]["fmt"]}{msg}{colors["reset"]["fmt"]}', file=stderr)
    elif level in colors.keys() and colors[level]['fac'] == 'stdout':
        print(f'{colors[level]["fmt"]}{msg}{colors["reset"]["fmt"]}')
    else:
        print(msg)


def clear_screen():
    # Clear the screen
    osystem('cls||clear')


def read_file(file: str) -> list[str]:
    # Read a file. Return a list of strings.
    try:
        with open(file, 'r') as f:
            return f.read().splitlines()
    except Exception as e:
        print_fmt(f'Failed to read from {e.filename}: {e.strerror}', 'fatal')
        exit(e.errno)


def get_prog_path(prog: str) -> str:
    # Return an absolute path to a script or binary.
    return which(prog)


def get_ip(node: NetObj) -> NetObj:
    # Perform a DNS lookup of a NetObj using the host DNS facility.
    if not check_ip(node.hostname):
        try:
            node.ip_addr = socket.getaddrinfo(node.hostname, 80, family=socket.AF_INET)[0][-1][0]
        except socket.gaierror as e:
            node.errs = f'{e.errno}: {e.strerror}'
    else:
        node.ip_addr = node.hostname

    return node


def check_ip(ip_addr: str) -> bool:
    try:
        ip_address(ip_addr)
    except ValueError:
        return False

    return True


def check_ping(node: NetObj, base_cmd: list[str]) -> NetObj:
    # Ping check a NetObj.
    if node.ip_addr is None:
        node.status = 'unknown'
        return node

    if type(base_cmd) is tuple:
        base_cmd = base_cmd[0]

    cmd = base_cmd + [node.ip_addr]

    result = run(cmd, capture_output=True, encoding='UTF-8')
    node.outs = result.stdout.strip()
    node.errs = result.stderr.strip()

    # Windows return codes for ping may not be reliable across versions.
    if sys_os == 'Windows' and 'TTL' not in result.stdout:
        node.icmp_status = 'failure'
    elif result.returncode != 0:
        node.icmp_status = 'failure'
    else:
        node.icmp_status = 'success'

    return node


def check_tcp(node: NetObj, port: int) -> NetObj:
    # Initiate a TCP connection to a single port.
    if node.ip_addr is None:
        node.status = 'unknown'
        return node

    if type(port) is tuple:
        port = port[0][0]

    ip_port = (node.ip_addr, port)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)

    try:
        sock.connect(ip_port)
        node.tcp_status = 'success'
    except Exception as e:
        node.errs = e.strerror
        node.tcp_status = 'failure'

    sock.close()

    return node


def sus_status(nodes: list) -> list:
    # Determine the dead or undead statuses of nodes.
    for node in nodes:
        if 'success' in [node.icmp_status, node.tcp_status]:
            node.status = 'undead'
        elif not any([node.icmp_status, node.tcp_status]):
            node.status = 'unknown'
        else:
            node.status = 'dead'

    return nodes


def process_list(lst: list, func: Callable[...,...], procs: int, *args: Any) -> list:
    # Concurrently run a function on a list, using ThreadPoolExecutor.
    with ThreadPoolExecutor(max_workers=procs) as executor:
        if args:
            future_to_item = {executor.submit(func, item, args): item for item in lst}
        else:
            future_to_item = {executor.submit(func, item): item for item in lst}

        for future in as_completed(future_to_item):
            item = future_to_item[future]

            try:
                data = future.result()
            except Exception as e:
                print('%r generated an exception: %s' % (item, e))

    return lst


def write_output(nodes: list, fmt_args: dict, mon_mode: bool) -> int:
    if fmt_args['fmt'].lower() == 'csv':
        f_name = fmt_args['f_name'] + f'.{fmt_args["fmt"]}'

        with open(f_name, 'w+') as f:
            writer = DictWriter(f, fieldnames=fmt_args['headers'])
            writer.writeheader()
            writer.writerows(
                {
                    k: v for k, v in node.__dict__.items() if k in fmt_args['headers']
                }
                for node in nodes
            )
    elif fmt_args['fmt'].lower() == 'json':
        f_name = fmt_args['f_name'] + f'.{fmt_args["fmt"]}'
        data = {'hosts': [node.__dict__ for node in nodes]}

        with open(f_name, 'w+') as f:
            dump(data, f)
    else:
        width = len(max([node.hostname for node in nodes], key=len)) + 5

        # A list to store results. Add headers
        results = []
        results.append("".join(h.ljust(width) for h in fmt_args["headers"]))

        # Append node results from each node to the list of results.
        for node in nodes:
            results.append("".join([str(v).ljust(width) for k, v in node.__dict__.items() if k in fmt_args["headers"]]))

        # Get the length of the longest line.
        line_len = len(max(results, key=len))

        # Modify results to have uniform line lengths.
        for index, line in enumerate(results):
            if len(line) < line_len:
                results[index] = ' ' + line + ' ' * (line_len - len(line) + 1)
            else:
                results[index] = ' ' + line + ' '

        # Print results.
        count = 0

        for index, line in enumerate(results):
            if index == 0:
                print_fmt(f'{line}', 'back_bold_cyan')
            elif ' undead' in line and any([x for x in fmt_args['filter'] if x in ['u', None]]):
                print_fmt(f'{line}', 'fore_std_green')
                count += 1
            elif ' dead' in line and any([x for x in fmt_args['filter'] if x in ['d', None]]):
                print_fmt(f'{line}', 'fore_std_red')
                count += 1
            elif 'unknown' in line and any([x for x in fmt_args['filter'] if x in ['k', None]]):
                print_fmt(f'{line}', 'fore_std_yellow')
                count += 1

        msg = f'Displaying {count}/{len(nodes)} targets'
        line_len = line_len - len(msg)

        # Print the bottom border.
        if mon_mode is False:
            print_fmt(f' {msg}{" " * (line_len + 2)}', 'back_bold_cyan')
        else:
            # Return max line length for monitor mode.
            return len(max(results, key=len)), msg


def main():
    args = conf_args()
    # Do not proceed if no tests specified.
    if not any([args.icmp, args.tcp]):
        print_fmt(
            'One or more of the following tests must be specified:\n'
            '[--icmp|-i, --tcp|-t]',
            'fatal'
        )
        exit(2)

    # Enable ANSI escape sequence for Windows.
    if sys_os == 'Windows':
        osystem('')

    if args.node:
        nodes = args.node
    elif args.host_file:
        nodes = read_file(args.host_file)
    else:
        print_fmt('DEBUG: No nodes specified. Argparse should have prevented this.', 'debug')
        exit(200)

    # Build a list of nodes as NetObj.
    nodes = [NetObj(node) for node in nodes]

    # Get node IP addresses.
    cores = def_cores * 20
    nodes = process_list(nodes, get_ip, cores)

    # Set format arguments.
    fmt_args = {
        'f_name': f'undead_report_{datetime.now().strftime("%Y-%m-%d_%H%M%S")}',
        'headers': [
            'hostname',
            'ip_addr',
            'status',
            'icmp_status',
            'errs'
            ],
        'fmt': args.output_format,
        'filter': None,
    }

    # If a filter has been set, add a rule.
    if args.filter:
        fmt_args['filter'] = args.filter

    # Dictionary of tests to run.
    tests = {}

    if args.icmp:
        ping = get_prog_path('ping')
        cores = def_cores * 20

        # Darwin and FreeBSD timeout is measured in milliseconds.
        # NetBSD doesn't support timeout, but does support deadline.
        # Linux usually measures timeout in seconds.
        if sys_os in ['Darwin', 'FreeBSD']:
            base_cmd = [ping, '-c', '1', '-W', '1000']
        elif sys_os in ['NetBSD', 'OpenBSD']:
            base_cmd = [ping, '-c', '1', '-w', '1']
        elif sys_os == 'Windows':
            base_cmd = [ping, '/n', '1', '/w', '1000']
        else:
            base_cmd = [ping, '-c', '1', '-W', '1']

        # Add test to tests.
        tests['ping'] = lambda: process_list(nodes, check_ping, cores, base_cmd)

    if args.tcp:
        cores = def_cores * 20
        for node in nodes:
            node.tcp_port = args.tcp[0]

        # Add test to tests.
        tests['tcp'] = lambda: process_list(nodes, check_tcp, cores, args.tcp)

        # Extend headers.
        fmt_args['headers'].insert(-1, 'tcp_port')
        fmt_args['headers'].insert(-1, 'tcp_status')

    # Run tests
    if args.monitor:
        fmt_args['fmt'] = 'stdout'
        clear_screen()

        try:
            while True:
                # Reset statuses for all tests on all nodes.
                for node in nodes:
                    node.icmp_status = node.tcp_status = None

                # Run tests.
                for test in tests.keys():
                    nodes = tests[test]()

                # Determine statuses of nodes.
                nodes = sus_status(nodes)

                # Sleep and print results.
                max_len, msg = write_output(nodes, fmt_args, True)
                countdown = f'Sleeping {args.monitor} seconds…'
                max_len = max_len - len(countdown)
                print_fmt(f' {msg}: {countdown}{" " * (max_len - len(countdown) - 5)}', 'back_bold_cyan')
                sleep(args.monitor)
                clear_screen()

        except KeyboardInterrupt:
            clear_screen()
            print_fmt('Caught KeyboardInterrupt. Quitting and writing results.\n', 'info')
    else:
        for test in tests.keys():
            nodes = tests[test]()

        nodes = sus_status(nodes)

    write_output(nodes, fmt_args, False)


if __name__ == '__main__':
    exit(main())
